{"id": 1, "start_time": 1690381053, "output": "Sections:\n1. Parsing\n2. Syntax Errors", "prompt_tokens": 321, "completion_tokens": 10, "total_tokens": 331, "end_time": 1690381053}
{"id": 5, "start_time": 1690381053, "output": "Sections:\n1. Working With Codemods\n2. Setting up and Running Codemods\n3. Writing a Codemod\n4. Testing Codemods", "prompt_tokens": 1882, "completion_tokens": 34, "total_tokens": 1916, "end_time": 1690381053}
{"id": 4, "start_time": 1690381053, "output": "Sections:\n\n1. Why LibCST?\n2. Abstract Syntax Trees (AST)\n3. Concrete Syntax Trees (CST)\n4. LibCST", "prompt_tokens": 3053, "completion_tokens": 31, "total_tokens": 3084, "end_time": 1690381053}
{"id": 3, "start_time": 1690381053, "output": "Sections:\n1. Best Practices\n    - Avoid isinstance when traversing\n    - Prefer updated_node when modifying trees\n    - Provide a config when generating code from templates", "prompt_tokens": 1863, "completion_tokens": 34, "total_tokens": 1897, "end_time": 1690381053}
{"id": 6, "start_time": 1690381053, "output": "Sections:\n1. Metadata\n   - Metadata APIs\n   - Accessing Metadata\n   - Providing Metadata\n2. Position Metadata\n3. Expression Context Metadata\n4. Scope Metadata\n5. Qualified Name Metadata\n6. Parent Node Metadata\n7. File Path Metadata\n8. Type Inference Metadata", "prompt_tokens": 2271, "completion_tokens": 62, "total_tokens": 2333, "end_time": 1690381053}
{"id": 9, "start_time": 1690381054, "output": "Sections:\n\n1. Visitors\n2. Visit and Leave Helper Functions\n3. Traversal Order\n4. Batched Visitors", "prompt_tokens": 1249, "completion_tokens": 25, "total_tokens": 1274, "end_time": 1690381054}
{"id": 2, "start_time": 1690381053, "output": "Experimental APIs:\n\nThese APIs may change at any time (including in minor releases) with no notice. You probably shouldn't use them, but if you do, you should pin your application to an exact release of LibCST to avoid breakages.\n\nReentrant Code Generation:\n\n- `libcst.metadata.ExperimentalReentrantCodegenProvider`\n- `libcst.metadata.CodegenPartial`", "prompt_tokens": 126, "completion_tokens": 76, "total_tokens": 202, "end_time": 1690381053}
{"id": 8, "start_time": 1690381054, "output": "Sections:\n1. Codemods\n2. Codemod Base\n3. Execution Interface\n4. Command-Line Support\n5. Command-Line Toolkit\n6. Library of Transforms", "prompt_tokens": 1939, "completion_tokens": 38, "total_tokens": 1977, "end_time": 1690381054}
{"id": 11, "start_time": 1690381055, "output": "Sections:\n\n1. Introduction\n2. Matcher APIs\n   - Functions\n   - Decorators\n3. Traversal Order\n4. Matcher Types\n   - Concrete Matchers\n   - Special Matchers\n   - Sequence Wildcard Matchers", "prompt_tokens": 2071, "completion_tokens": 47, "total_tokens": 2118, "end_time": 1690381055}
{"id": 0, "start_time": 1690381053, "output": "Sections:\n1. Introduction\n   - README.rst\n   - why_libcst\n   - motivation\n2. Tutorial\n   - Parsing and Visitors <tutorial>\n   - Metadata <metadata_tutorial>\n   - Scope Analysis <scope_tutorial>\n   - Matchers <matchers_tutorial>\n   - Codemodding <codemods_tutorial>\n   - Best Practices <best_practices>\n3. Reference\n   - parser\n   - nodes\n   - visitors\n   - metadata\n   - matchers\n   - codemods\n   - helpers\n   - experimental\n4. Indices and tables\n   - genindex\n   - modindex\n   - search\n5. README.rst (fb-docs section)", "prompt_tokens": 321, "completion_tokens": 153, "total_tokens": 474, "end_time": 1690381053}
{"id": 7, "start_time": 1690381053, "output": "Sections:\n1. Motivation\n   - Exact Representation\n   - Nodes should be constructed exactly as written in code\n2. Ease of Traversal\n   - As flat as possible\n   - As regular as possible\n   - As high-level as possible\n3. Ease of Modification\n   - All nodes should be fully typed\n   - Additional runtime constraints\n   - Sane defaults\n   - Reasonably intelligent ownership of whitespace\n   - It should be easy to change a single field in an existing node\n   - Reparentable\n4. Well Tested\n   - All nodes should be fully tested", "prompt_tokens": 825, "completion_tokens": 124, "total_tokens": 949, "end_time": 1690381053}
{"id": 12, "start_time": 1690381055, "output": "Helpers\n=======\n\nHelpers are higher level functions built for reducing recurring code boilerplate. We add helpers as methods of `CSTNode` or in the `libcst.helpers` package based on the following principles:\n\n- `CSTNode` methods: These are simple, read-only functions that only require data of the direct children of a `CSTNode`.\n- `libcst.helpers`: These functions are used for node transforms or recursively traversing the syntax tree.\n\nConstruction Helpers\n--------------------\n\nThese functions assist in creating a new LibCST tree.\n\n- `libcst.helpers.parse_template_module`\n- `libcst.helpers.parse_template_expression`\n- `libcst.helpers.parse_template_statement`\n\nTransformation Helpers\n----------------------\n\nThese functions assist in transforming an existing LibCST node.\n\n- `libcst.helpers.insert_header_comments`\n\nTraversing Helpers\n------------------\n\nThese functions assist in traversing an existing LibCST tree.\n\n- `libcst.helpers.get_full_name_for_node`\n- `libcst.helpers.get_full_name_for_node_or_raise`\n- `libcst.helpers.ensure_type`", "prompt_tokens": 253, "completion_tokens": 216, "total_tokens": 469, "end_time": 1690381055}
{"id": 10, "start_time": 1690381054, "output": "Sections:\n\n1. Introduction\n2. Nodes\n   - CSTNode\n   - Module\n3. Expressions\n   - BaseExpression\n   - Name\n   - Attribute\n   - UnaryOperation\n   - BinaryOperation\n   - BooleanOperation\n   - Comparison\n   - ComparisonTarget\n4. Control Flow\n   - Asynchronous\n   - Await\n   - Yield\n   - From\n   - IfExp\n5. Lambdas and Function Calls\n   - Lambda\n   - Call\n   - Arg\n6. Literal Values\n   - Ellipsis\n7. Numbers\n   - BaseNumber\n   - Integer\n   - Float\n   - Imaginary\n8. Strings\n   - BaseString\n   - SimpleString\n   - ConcatenatedString\n9. Formatted Strings (f-strings)\n   - FormattedString\n   - BaseFormattedStringContent\n   - FormattedStringText\n   - FormattedStringExpression\n10. Collections\n    - Simple Collections: Tuple, BaseList, List, BaseSet, Set\n    - Simple Collection Elements: BaseElement, Element, StarredElement\n    - Dictionaries: BaseDict, Dict\n    - Dictionary Elements: BaseDictElement, DictElement, StarredDictElement\n11. Comprehensions\n    - BaseComp\n    - BaseSimpleComp\n    - GeneratorExp\n    - ListComp\n    - SetComp\n    - DictComp\n    - CompFor\n    - CompIf\n12. Subscripts and Slices\n    - Subscript\n    - BaseSlice\n    - Index\n    - Slice\n    - SubscriptElement\n13. Parenthesis, Brackets, and Braces\n    - LeftParen\n    - RightParen\n    - LeftSquareBracket\n    - RightSquareBracket\n    - LeftCurlyBrace\n    - RightCurlyBrace\n14. Statements\n    - BaseSmallStatement\n    - AnnAssign\n    - Assert\n    - Assign\n    - AugAssign\n    - Break\n    - Continue\n    - Del\n    - Expr\n    - Global\n    - Import\n    - ImportFrom\n    - Nonlocal\n    - Pass\n    - Raise\n    - Return\n    - BaseCompoundStatement\n    - ClassDef\n    - For\n    - FunctionDef\n    - If\n    - Try\n    - While\n    - With\n15. Helper Nodes\n    - Annotation\n    - AsName\n    - AssignTarget\n    - BaseAssignTargetExpression\n    - BaseDelTargetExpression\n    - Decorator\n    - Else\n    - ExceptHandler\n    - Finally\n    - ImportAlias\n    - NameItem\n    - Parameters\n    - Param\n    - ParamSlash\n    - ParamStar\n    - WithItem\n16. Statement Blocks\n    - BaseSuite\n    - SimpleStatementLine\n    - SimpleStatementSuite\n    - IndentedBlock\n17. Operators\n    - Unary Operators: BitInvert, Minus, Not, Plus\n    - Boolean Operators: And, Or\n    - Binary Operators: Add, BitAnd, BitOr, BitXor, Divide, FloorDivide, LeftShift, MatrixMultiply, Modulo, Multiply, Power, RightShift, Subtract\n    - Comparison Operators: Equal, GreaterThan, GreaterThanEqual, In, Is, LessThan, LessThanEqual, NotEqual, IsNot, NotIn\n    - Augmented Assignment Operators: AddAssign, BitAndAssign, BitOrAssign, BitXorAssign, DivideAssign, FloorDivideAssign, LeftShiftAssign, MatrixMultiplyAssign, ModuloAssign, MultiplyAssign, PowerAssign, RightShiftAssign, SubtractAssign\n    - Miscellaneous: AssignEqual, Colon, Comma, Dot, ImportStar, Semicolon\n18. Whitespace\n    - Comment\n    - EmptyLine\n    - Newline\n    - ParenthesizedWhitespace\n    - SimpleWhitespace\n    - TrailingWhitespace\n    - BaseParenthesizableWhitespace\n19. Maybe Sentinel", "prompt_tokens": 2509, "completion_tokens": 840, "total_tokens": 3349, "end_time": 1690381054}
