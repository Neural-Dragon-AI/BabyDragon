{"id": 5, "start_time": 1690381565, "output": "", "prompt_tokens": 1895, "completion_tokens": 0, "total_tokens": 1895, "end_time": 1690381565}
{"id": 2, "start_time": 1690381565, "output": "[\n\".. _libcst-experimental:\",\n\"\",\n\"=================\",\n\"Experimental APIs\",\n\"=================\",\n\"\",\n\"These APIs may change at any time (including in minor releases) with no notice. You probably shouldn't use them, but if you do, you should pin your application to an exact release of LibCST to avoid breakages.\",\n\"\",\n\"Reentrant Code Generation\",\n\"-------------------------\",\n\"\",\n\".. autoclass:: libcst.metadata.ExperimentalReentrantCodegenProvider\",\n\".. autoclass:: libcst.metadata.CodegenPartial\"\n]", "prompt_tokens": 139, "completion_tokens": 108, "total_tokens": 247, "end_time": 1690381565}
{"id": 7, "start_time": 1690381566, "output": "Motivation:\n\n\"When designing LibCST, we used the following list of motivations.\"\n\nExact Representation:\n- Trees should be rewritable.\n- Nodes should be constructed exactly as written in code.\n\nEase of Traversal:\n- As flat as possible.\n- As regular as possible.\n- As high-level as possible.\n\nEase of Modification:\n- All nodes should be fully typed.\n- Additional runtime constraints.\n- Sane defaults.\n- Reasonably intelligent ownership of whitespace.\n- It should be easy to change a single field in an existing node without needing to modify or fix up adjacent nodes.\n- Reparentable.\n\nWell Tested:\n- All nodes should be fully tested.", "prompt_tokens": 838, "completion_tokens": 132, "total_tokens": 970, "end_time": 1690381566}
{"id": 1, "start_time": 1690381565, "output": "[\n\"Parsing\",\n\"\",\n\"The parser functions accept source code and an optional configuration object,\",\n\"and will generate :class:`~libcst.CSTNode` objects.\",\n\"\",\n\":func:`~libcst.parse_module` is the most useful function here, since it accepts\",\n\"the entire contents of a file and returns a new tree, but\",\n\":func:`~libcst.parse_expression` and :func:`~libcst.parse_statement` are useful\",\n\"when inserting new nodes into the tree, because they're easier to use than the\",\n\"equivalent node constructors.\",\n\"\",\n\"import libcst as cst\",\n\"cst.parse_expression(\\\"1 + 2\\\")\",\n\"BinaryOperation(\",\n\"left=Integer(\",\n\"value='1',\",\n\"lpar=[],\",\n\"rpar=[],\",\n\"),\",\n\"operator=Add(\",\n\"whitespace_before=SimpleWhitespace(\",\n\"value=' ',\",\n\"),\",\n\"whitespace_after=SimpleWhitespace(\",\n\"value=' ',\",\n\"),\",\n\"),\",\n\"right=Integer(\",\n\"value='2',\",\n\"lpar=[],\",\n\"rpar=[],\",\n\"),\",\n\"lpar=[],\",\n\"rpar=[],\",\n\")\",\n\"\",\n\"\",\n\".. autofunction:: libcst.parse_module\",\n\".. autofunction:: libcst.parse_expression\",\n\".. autofunction:: libcst.parse_statement\",\n\".. autoclass:: libcst.PartialParserConfig\",\n\"\",\n\"Syntax Errors\",\n\"\",\n\".. autoclass:: libcst.ParserSyntaxError\",\n\"   :members: message, raw_line, raw_column, editor_line, editor_column\",\n\"   :special-members: __str__\"\n]", "prompt_tokens": 334, "completion_tokens": 316, "total_tokens": 650, "end_time": 1690381565}
{"id": 0, "start_time": 1690381565, "output": "# Cleaned up and organized Python list of strings\n\ndocumentation = [\n    \".. LibCST documentation master file, created by\",\n    \"sphinx-quickstart on Wed Jul 17 17:05:21 2019.\",\n    \"You can adapt this file completely to your liking, but it should at least\",\n    \"contain the root `toctree` directive.\",\n    \"\",\n    \"======\",\n    \"LibCST\",\n    \"======\",\n    \"\",\n    \".. include:: ../../README.rst\",\n    \"   :start-after: intro-start\",\n    \"   :end-before: intro-end\",\n    \"\",\n    \".. toctree::\",\n    \"   :maxdepth: 2\",\n    \"   :caption: Introduction:\",\n    \"\",\n    \"   why_libcst\",\n    \"   motivation\",\n    \"\",\n    \".. toctree::\",\n    \"   :maxdepth: 2\",\n    \"   :caption: Tutorial:\",\n    \"\",\n    \"   Parsing and Visitors <tutorial>\",\n    \"   Metadata <metadata_tutorial>\",\n    \"   Scope Analysis <scope_tutorial>\",\n    \"   Matchers <matchers_tutorial>\",\n    \"   Codemodding <codemods_tutorial>\",\n    \"   Best Practices <best_practices>\",\n    \"\",\n    \".. toctree::\",\n    \"   :maxdepth: 2\",\n    \"   :caption: Reference:\",\n    \"\",\n    \"   parser\",\n    \"   nodes\",\n    \"   visitors\",\n    \"   metadata\",\n    \"   matchers\",\n    \"   codemods\",\n    \"   helpers\",\n    \"   experimental\",\n    \"\",\n    \"\",\n    \"Indices and tables\",\n    \"==================\",\n    \"\",\n    \"* :ref:`genindex`\",\n    \"* :ref:`modindex`\",\n    \"* :ref:`search`\",\n    \"\",\n    \"\",\n    \".. include:: ../../README.rst\",\n    \"   :start-after: fb-docs-start\",\n    \"   :end-before: fb-docs-end\"\n]\n", "prompt_tokens": 334, "completion_tokens": 411, "total_tokens": 745, "end_time": 1690381565}
{"id": 10, "start_time": 1690381576, "output": "[\n\"Nodes\",\n\"CSTNode and its subclasses cover Python's full grammar in a whitespace-sensitive fashion, forming LibCST's concrete syntax tree.\",\n\"Many of these nodes are designed to behave similarly to Python's abstract syntax tree.\",\n\"CSTNode\",\"The base node type which all other nodes derive from.\",\n\"Module\",\"A node that represents an entire python module.\",\n\"Expressions\",\n\"An expression is anything that represents a value (e.g. it could be returned from a function). All expressions subclass from BaseExpression.\",\n\"Expression can be parsed with parse_expression or as part of a statement or module using parse_statement or parse_module.\",\n\"Names and Object Attributes\",\n\"Name\",\n\"Attribute\",\n\"Operations and Comparisons\",\n\"UnaryOperation\",\n\"BinaryOperation\",\n\"BooleanOperation\",\n\"Comparison\",\n\"ComparisonTarget\",\n\"Control Flow\",\n\"Asynchronous\",\n\"Await\",\n\"Yield\",\n\"From\",\n\"IfExp\",\n\"Lambdas and Function Calls\",\n\"Lambda\",\n\"Call\",\n\"Arg\",\n\"Literal Values\",\n\"Ellipsis\",\n\"Numbers\",\n\"BaseNumber\",\n\"Integer\",\n\"Float\",\n\"Imaginary\",\n\"Strings\",\n\"BaseString\",\n\"SimpleString\",\n\"ConcatenatedString\",\n\"Formatted Strings (f-strings)\",\n\"FormattedString\",\n\"BaseFormattedStringContent\",\n\"FormattedStringText\",\n\"FormattedStringExpression\",\n\"Collections\",\n\"Simple Collections\",\n\"Tuple\",\n\"BaseList\",\n\"List\",\n\"BaseSet\",\n\"Set\",\n\"Simple Collection Elements\",\n\"BaseElement\",\n\"Element\",\n\"StarredElement\",\n\"Dictionaries\",\n\"BaseDict\",\n\"Dict\",\n\"Dictionary Elements\",\n\"BaseDictElement\",\n\"DictElement\",\n\"StarredDictElement\",\n\"Comprehensions\",\n\"BaseComp\",\n\"BaseSimpleComp\",\n\"GeneratorExp\",\n\"ListComp\",\n\"SetComp\",\n\"DictComp\",\n\"CompFor\",\n\"CompIf\",\n\"Subscripts and Slices\",\n\"Subscript\",\n\"BaseSlice\",\n\"Index\",\n\"Slice\",\n\"SubscriptElement\",\n\"Parenthesis, Brackets, and Braces\",\n\"LeftParen\",\n\"RightParen\",\n\"LeftSquareBracket\",\n\"RightSquareBracket\",\n\"LeftCurlyBrace\",\n\"RightCurlyBrace\",\n\"Statements\",\n\"Statements represent a line of code or a control structure with other lines of code, such as an If block.\",\n\"All statements subclass from BaseSmallStatement or BaseCompoundStatement.\",\n\"Statements can be parsed with parse_statement or as part of a module using parse_module.\",\n\"Simple Statements\",\n\"BaseSmallStatement\",\n\"AnnAssign\",\n\"Assert\",\n\"Assign\",\n\"AugAssign\",\n\"Break\",\n\"Continue\",\n\"Del\",\n\"Expr\",\n\"Global\",\n\"Import\",\n\"ImportFrom\",\n\"Nonlocal\",\n\"Pass\",\n\"Raise\",\n\"Return\",\n\"Compound Statements\",\n\"BaseCompoundStatement\",\n\"ClassDef\",\n\"For\",\n\"FunctionDef\",\n\"If\",\n\"Try\",\n\"While\",\n\"With\",\n\"Helper Nodes\",\n\"Annotation\",\n\"AsName\",\n\"AssignTarget\",\n\"BaseAssignTargetExpression\",\n\"BaseDelTargetExpression\",\n\"Decorator\",\n\"Else\",\n\"ExceptHandler\",\n\"Finally\",\n\"ImportAlias\",\n\"NameItem\",\n\"Params\",\n\"Param\",\n\"ParamSlash\",\n\"ParamStar\",\n\"WithItem\",\n\"Statement Blocks\",\n\"BaseSuite\",\n\"SimpleStatementLine\",\n\"SimpleStatementSuite\",\n\"IndentedBlock\",\n\"Operators\",\n\"Unary Operators\",\n\"BitInvert\",\n\"Minus\",\n\"Not\",\n\"Plus\",\n\"Boolean Operators\",\n\"And\",\n\"Or\",\n\"Binary Operators\",\n\"Add\",\n\"BitAnd\",\n\"BitOr\",\n\"BitXor\",\n\"Divide\",\n\"FloorDivide\",\n\"LeftShift\",\n\"MatrixMultiply\",\n\"Modulo\",\n\"Multiply\",\n\"Power\",\n\"RightShift\",\n\"Subtract\",\n\"Comparison Operators\",\n\"Equal\",\n\"GreaterThan\",\n\"GreaterThanEqual\",\n\"In\",\n\"Is\",\n\"LessThan\",\n\"LessThanEqual\",\n\"NotEqual\",\n\"IsNot\",\n\"NotIn\",\n\"Augmented Assignment Operators\",\n\"AddAssign\",\n\"BitAndAssign\",\n\"BitOrAssign\",\n\"BitXorAssign\",\n\"DivideAssign\",\n\"FloorDivideAssign\",\n\"LeftShiftAssign\",\n\"MatrixMultiplyAssign\",\n\"ModuloAssign\",\n\"MultiplyAssign\",\n\"PowerAssign\",\n\"RightShiftAssign\",\n\"SubtractAssign\",\n\"Miscellaneous\",\n\"AssignEqual\",\n\"Colon\",\n\"Comma\",\n\"Dot\",\n\"ImportStar\",\n\"Semicolon\",\n\"Whitespace\",\n\"Comment\",\n\"EmptyLine\",\n\"Newline\",\n\"ParenthesizedWhitespace\",\n\"SimpleWhitespace\",\n\"TrailingWhitespace\",\n\"BaseParenthesizableWhitespace\",\n\"Maybe Sentinel\"\n]", "prompt_tokens": 2522, "completion_tokens": 935, "total_tokens": 3457, "end_time": 1690381576}
{"id": 8, "start_time": 1690381568, "output": "['Codemods', '', 'LibCST defines a codemod as an automated refactor that can be applied to a codebase of arbitrary size. Codemods are provided as a framework for writing higher-order transforms that consist of other, simpler transforms. It includes provisions for quickly creating a command-line interface to execute a codemod.', '', 'Codemod Base', '', 'All codemods derive from a common base, :class:`~libcst.codemod.Codemod`. This class includes a context, automatic metadata resolution and multi-pass transform support. Codemods are intended to be executed using the :func:`~libcst.codemod.transform_module` interface.', '', 'class `~libcst.codemod.Codemod`', 'class `~libcst.codemod.CodemodContext`', '', 'As a convenience, LibCST-compatible visitors are provided which extend the feature-set of :class:`~libcst.codemod.Codemod` to LibCST visitors and transforms. Remember that:class:`~libcst.codemod.ContextAwareTransformer` is still a:class:`~libcst.codemod.Codemod`, so you should still execute it using:func:`~libcst.codemod.transform_module`.', '', 'class `~libcst.codemod.ContextAwareTransformer` :exclude-members: transform_module_impl', 'class `~libcst.codemod.ContextAwareVisitor`', '', 'It is often necessary to bail out of a codemod mid-operation when you realize that you do not want to operate on a module. This can be for any reason such as realizing the module includes some operation that you do not support. If you wish to skip a module, you can raise the:class:`~libcst.codemod.SkipFile` exception. For codemods executed using the:func:`~libcst.codemod.transform_module` interface, all warnings emitted up to the exception being thrown will be preserved in the result.', '', 'class `~libcst.codemod.SkipFile`', '', 'Finally, its often easier to test codemods by writing verification tests instead of running repeatedly on your project. LibCST makes this easy with:class:`~libcst.codemod.CodemodTest`. Often you can develop the majority of your codemod using just tests, augmenting functionality when you run into an unexpected edge case when running it against your repository.', '', 'class `~libcst.codemod.CodemodTest` :inherited-members: :exclude-members: addCleanup, addTypeEqualityFunc, assertAlmostEqual, assertAlmostEquals, assertCountEqual, assertDictContainsSubset, assertDictEqual, assertEqual, assertEquals, assertFalse, assertGreater, assertGreaterEqual, assertIn, assertIs, assertIsInstance, assertIsNone, assertIsNot, assertIsNotNone, assertLess, assertLessEqual, assertListEqual, assertLogs, assertMultiLineEqual, assertNotAlmostEqual, assertNotAlmostEquals, assertNotEqual, assertNotEquals, assertNotIn, assertNotIsInstance, assertNotRegex, assertNotRegexpMatches, assertRaises, assertRaisesRegex, assertRaisesRegexp, assertRegex, assertRegexpMatches, assertSequenceEqual, assertSetEqual, assertTrue, assertTupleEqual, assertWarns, assertWarnsRegex, assert_, countTestCases, debug, defaultTestResult, doCleanups, fail, failIf, failIfAlmostEqual, failIfEqual, failUnless, failUnlessAlmostEqual, failUnlessEqual, failUnlessRaises, failureException, id, longMessage, maxDiff, run, setUp, classmethod, setUpClass, shortDescription, skipTest, subTest, tearDown, tearDownClass', '', 'Execution Interface', '', 'As documented in the Codemod Base section above, codemods are meant to be programmatically executed using:func:`~libcst.codemod.transform_module`. Executing in this manner handles all of the featureset of codemods, including metadata calculation and exception handling.', '', 'function `~libcst.codemod.transform_module`', 'class `~libcst.codemod.TransformResult`', 'class `~libcst.codemod.TransformSuccess`', 'class `~libcst.codemod.TransformFailure`', 'class `~libcst.codemod.TransformSkip`', 'class `~libcst.codemod.SkipReason`', 'class `~libcst.codemod.TransformExit`', '', 'Command-Line Support', '', 'LibCST includes additional support to facilitate faster development of codemods which are to be run at the command-line. This is achieved through the:class:`~libcst.codemod.CodemodCommand` class and the codemod utility which lives inside libcst.tool. The:class:`~libcst.codemod.CodemodCommand` class provides a codemod description and an interface to add arguments to the command-line. This is translated to a custom help message and command-line options that a user can provide when running a codemod at the command-line.', '', 'class `~libcst.codemod.CodemodCommand` :exclude-members: transform_module', '', 'Additionally, a few convenience classes have been provided which take the boilerplate out of common types of codemods:', '', 'class `~libcst.codemod.VisitorBasedCodemodCommand`', 'class `~libcst.codemod.MagicArgsCodemodCommand` :exclude-members: transform_module_impl', '', 'Command-Line Toolkit', '', 'Several helpers for constructing a command-line interface are provided. These are used in the codemod utility to provide LibCSTs de-facto command-line interface but they are also available to be used directly in the case that circumstances demand a custom command-line tool.', '', 'function `~libcst.codemod.gather_files`', 'function `~libcst.codemod.exec_transform_with_prettyprint`', 'function `~libcst.codemod.parallel_exec_transform_with_prettyprint`', 'class `~libcst.codemod.ParallelTransformResult`', 'function `~libcst.codemod.diff_code`', '', 'Library of Transforms', '', 'LibCST additionally includes a library of transforms to reduce the need for boilerplate inside codemods. As of now, the list includes the following helpers.', '', 'class `~libcst.codemod.visitors.GatherImportsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.GatherExportsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.AddImportsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.RemoveImportsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.ApplyTypeAnnotationsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.GatherUnusedImportsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.GatherCommentsVisitor` :no-undoc-members:', 'class `~libcst.codemod.visitors.GatherNamesFromStringAnnotationsVisitor` :no-undoc-members:']", "prompt_tokens": 1952, "completion_tokens": 1490, "total_tokens": 3442, "end_time": 1690381569}
{"id": 12, "start_time": 1690381606, "output": "['Helpers', '', 'Helpers are higher level functions built for reducing recurring code boilerplate.', 'We add helpers as method of `CSTNode` or `libcst.helpers` package based on those principles:', '', '- `CSTNode` method: simple, read-only and only require data of the direct children of a CSTNode.', '- `libcst.helpers`: node transforms or require recursively traversing the syntax tree.', '', 'Construction Helpers', '-------------------', '', 'Functions that assist in creating a new LibCST tree.', '', '.. autofunction:: libcst.helpers.parse_template_module', '.. autofunction:: libcst.helpers.parse_template_expression', '.. autofunction:: libcst.helpers.parse_template_statement', '', 'Transformation Helpers', '----------------------', '', 'Functions that assist in transforming an existing LibCST node.', '', '.. autofunction:: libcst.helpers.insert_header_comments', '', 'Traversing Helpers', '--------------------', '', 'Functions that assist in traversing an existing LibCST tree.', '', '.. autofunction:: libcst.helpers.get_full_name_for_node', '.. autofunction:: libcst.helpers.get_full_name_for_node_or_raise', '.. autofunction:: libcst.helpers.ensure_type']", "prompt_tokens": 266, "completion_tokens": 241, "total_tokens": 507, "end_time": 1690381606}
{"id": 9, "start_time": 1690381570, "output": "[\n    \".. _libcst-visitors:\",\n    \"\",\n    \"Visitors\",\n    \"========\",\n    \"\",\n    \".. autoclass:: libcst.CSTVisitor\",\n    \".. autoclass:: libcst.CSTTransformer\",\n    \".. autofunction:: libcst.RemoveFromParent\",\n    \".. autoclass:: libcst.RemovalSentinel\",\n    \".. autoclass:: libcst.FlattenSentinel\",\n    \"\",\n    \"Visit and Leave Helper Functions\",\n    \"--------------------------------\",\n    \"\",\n    \"While it is possible to subclass from :class:`~libcst.CSTVisitor` or :class:`~libcst.CSTTransformer`\",\n    \"and override the ``on_visit``/``on_leave``/``on_visit_attribute``/``on_leave_attribute`` functions\",\n    \"directly, it is not recommended. The default implementation for both visitors will look up any\",\n    \"``visit_<Type[CSTNode]>``, ``leave_<Type[CSTNode]>``, ``visit_<Type[CSTNode]>_<attribute>`` and\",\n    \"``leave_<Type[CSTNode]>_<attribute>`` method on the visitor subclass and call them directly.\",\n    \"If such a function exists for the node in question, the visitor base class will call the relevant\",\n    \"function, respecting the above outlined semantics. If the function does not exist, the visitor base\",\n    \"class will assume that you do not care about that node and visit its children for you without\",\n    \"requiring a default implementation.\",\n    \"\",\n    \"Much like ``on_visit``, ``visit_<Type[CSTNode]>`` return a boolean specifying whether or not LibCST\",\n    \"should visit a node's children. As a convenience, you can return ``None`` instead of a boolean value\",\n    \"from your ``visit_<Type[CSTNode]>`` functions. Returning a ``None`` value is treated as a request for\",\n    \"default behavior, which causes the visitor to traverse children. It is equivalent to returning\",\n    \"``True``, but requires no explicit return.\",\n    \"\",\n    \"For example, the below visitor will visit every function definition, traversing to its children only\",\n    \"if the function name doesn't include the word 'foo'. Notice that we don't need to provide our own\",\n    \"``on_visit`` or ``on_leave`` function, nor do we need to provide visit and leave functions for the\",\n    \"rest of the nodes which we do not care about. This will have the effect of visiting all strings not\",\n    \"inside of functions that have 'foo' in the name. Note that we take advantage of default behavior when\",\n    \"we decline to return a value in ``visit_SimpleString``.\",\n    \"\",\n    \".. code-block:: python\",\n    \"\",\n    \"    class FooingAround(libcst.CSTVisitor):\",\n    \"        def visit_FunctionDef(self, node: libcst.FunctionDef) -> bool:\",\n    \"            return 'foo' not in node.name.value\",\n    \"\",\n    \"        def visit_SimpleString(self, node: libcst.SimpleString) -> None:\",\n    \"            print(node.value)\",\n    \"\",\n    \"An example Python REPL using the above visitor is as follows::\",\n    \"\",\n    \"    >>> import libcst\",\n    \"    >>> demo = libcst.parse_module(\\\"'abc'\\\\n'123'\\\\ndef foo():\\\\n    'not printed'\\\")\",\n    \"    >>> _ = demo.visit(FooingAround())\",\n    \"    'abc'\",\n    \"    '123'\",\n    \"\",\n    \".. _libcst-visitor-traversal:\",\n    \"\",\n    \"Traversal Order\",\n    \"---------------\",\n    \"\",\n    \"Traversal of any parsed tree directly matches the order that tokens appear in the source which\",\n    \"was parsed. LibCST will first call ``on_visit`` for the node. Then, for each of the node's\",\n    \"child attributes, LibCST will call ``on_visit_attribute`` for the node's attribute, followed\",\n    \"by running the same visit algorithm on each child node in the node's attribute. Then,\",\n    \"``on_leave_attribute`` is called. After each attribute has been fully traversed, LibCST will\",\n    \"call ``on_leave`` for the node. Note that LibCST will only call ``on_visit_attribute`` and\",\n    \"``on_leave_attribute`` for attributes in which there might be a LibCST node as a child. It\",\n    \"will not call attribute visitors for attributes which are built-in python types.\",\n    \"\",\n    \"For example, take the following simple tree generated by calling ``parse_expression(\\\"1+2\\\")``.\",\n    \"\",\n    \".. code-block:: python\",\n    \"\",\n    \"    BinaryOperation(\",\n    \"        left=Integer(\",\n    \"            value='1',\",\n    \"            lpar=[],\",\n    \"            rpar=[],\",\n    \"        ),\",\n    \"        operator=Add(\",\n    \"            whitespace_before=SimpleWhitespace(\",\n    \"                value='',\",\n    \"            ),\",\n    \"            whitespace_after=SimpleWhitespace(\",\n    \"                value='',\",\n    \"            ),\",\n    \"        ),\",\n    \"        right=Integer(\",\n    \"            value='2',\",\n    \"            lpar=[],\",\n    \"            rpar=[],\",\n    \"        ),\",\n    \"        lpar=[],\",\n    \"        rpar=[],\",\n    \"    )\",\n    \"\",\n    \"Assuming you have a visitor that overrides every convenience helper method available,\",\n    \"methods will be called in this order:\",\n    \"\",\n    \".. code-block:: python\",\n    \"\",\n    \"    visit_BinaryOperation\",\n    \"    visit_BinaryOperation_lpar\",\n    \"    leave_BinaryOperation_lpar\",\n    \"    visit_BinaryOperation_left\",\n    \"    visit_Integer\",\n    \"    visit_Integer_lpar\",\n    \"    leave_Integer_lpar\",\n    \"    visit_Integer_rpar\",\n    \"    leave_Integer_rpar\",\n    \"    leave_Integer\",\n    \"    leave_BinaryOperation_left\",\n    \"    visit_BinaryOperation_operator\",\n    \"    visit_Add\",\n    \"    visit_Add_whitespace_before\",\n    \"    visit_SimpleWhitespace\",\n    \"    leave_SimpleWhitespace\",\n    \"    leave_Add_whitespace_before\",\n    \"    visit_Add_whitespace_after\",\n    \"    visit_SimpleWhitespace\",\n    \"    leave_SimpleWhitespace\",\n    \"    leave_Add_whitespace_after\",\n    \"    leave_Add\",\n    \"    leave_BinaryOperation_operator\",\n    \"    visit_BinaryOperation_right\",\n    \"    visit_Integer\",\n    \"    visit_Integer_lpar\",\n    \"    leave_Integer_lpar\",\n    \"    visit_Integer_rpar\",\n    \"    leave_Integer_rpar\",\n    \"    leave_Integer\",\n    \"    leave_BinaryOperation_right\",\n    \"    visit_BinaryOperation_rpar\",\n    \"    leave_BinaryOperation_rpar\",\n    \"    leave_BinaryOperation\",\n    \"\",\n    \"Batched Visitors\",\n    \"----------------\",\n    \"\",\n    \"A batchable visitor class is provided to facilitate performing operations that\",\n    \"can be performed in parallel in a single traversal over a CST. An example of this\",\n    \"is :ref:`metadata computation<libcst-metadata>`.\",\n    \"\",\n    \".. autoclass:: libcst.BatchableCSTVisitor\",\n    \".. autofunction:: libcst.visit_batched\"\n]", "prompt_tokens": 1262, "completion_tokens": 1523, "total_tokens": 2785, "end_time": 1690381570}
{"id": 6, "start_time": 1690381565, "output": "[\n    \"Metadata\",\n    \"\",\n    \"Metadata APIs\",\n    \"\",\n    \"LibCST ships with a metadata interface that defines a standardized way to associate nodes in a CST with arbitrary metadata while maintaining the immutability of the tree. The metadata interface is designed to be declarative and type safe. Here's a quick example of using the metadata interface to get line and column numbers of nodes through the PositionProvider:\",\n    \"\",\n    \"```python\",\n    \"class NamePrinter(cst.CSTVisitor):\",\n    \"    METADATA_DEPENDENCIES = (cst.metadata.PositionProvider,)\",\n    \"\",\n    \"    def visit_Name(self, node: cst.Name) -> None:\",\n    \"        pos = self.get_metadata(cst.metadata.PositionProvider, node).start\",\n    \"        print(f\\\"{node.value} found at line {pos.line}, column {pos.column}\\\")\",\n    \"\",\n    \"wrapper = cst.metadata.MetadataWrapper(cst.parse_module(\\\"x = 1\\\"))\",\n    \"result = wrapper.visit(NamePrinter())  # should print \\\"x found at line 1, column 0\\\"\",\n    \"```\",\n    \"\",\n    \"More examples of using the metadata interface can be found on the Metadata Tutorial.\",\n    \"Accessing Metadata\",\n    \"\",\n    \"To work with metadata you need to wrap a module with a MetadataWrapper. The wrapper provides a resolve function and a resolve_many function to generate metadata.\",\n    \"\",\n    \"```python\",\n    \".. autoclass:: libcst.metadata.MetadataWrapper\",\n    \"   :special-members: __init__\",\n    \"```\",\n    \"\",\n    \"If you're working with visitors, which extend MetadataDependent, metadata dependencies will be automatically computed when visited by a MetadataWrapper and are accessible through get_metadata\",\n    \"\",\n    \"```python\",\n    \".. autoclass:: libcst.MetadataDependent\",\n    \"```\",\n    \"\",\n    \"Providing Metadata\",\n    \"\",\n    \"Metadata is generated through provider classes that can be passed to MetadataWrapper.resolve() or declared as a dependency of a MetadataDependent. These providers are then resolved automatically using methods provided by MetadataWrapper.\",\n    \"\",\n    \"In most cases, you should extend BatchableMetadataProvider when writing a provider, unless you have a particular reason to not use a batchable visitor. Only extend from BaseMetadataProvider if your provider does not use the visitor pattern for computing metadata for a tree.\",\n    \"\",\n    \"```python\",\n    \".. autoclass:: libcst.BaseMetadataProvider\",\n    \"\",\n    \".. autoclass:: libcst.metadata.BatchableMetadataProvider\",\n    \"\",\n    \".. autoclass:: libcst.metadata.VisitorMetadataProvider\",\n    \"```\",\n    \"\",\n    \"Metadata Providers\",\n    \"\",\n    \"PositionProvider,\",\n    \"ByteSpanPositionProvider,\",\n    \"WhitespaceInclusivePositionProvider,\",\n    \"ExpressionContextProvider,\",\n    \"ScopeProvider,\",\n    \"QualifiedNameProvider,\",\n    \"ParentNodeProvider, and\",\n    \"TypeInferenceProvider\",\n    \"are currently provided. Each metadata provider may have its own custom data structure.\",\n    \"\",\n    \"Position Metadata\",\n    \"\",\n    \"There are two types of position metadata available. They both track the same position concept, but differ in terms of representation. One represents position with line and column numbers, while the other outputs byte offset and length pairs.\",\n    \"\",\n    \"Line and column numbers are available through the metadata interface by declaring one of PositionProvider or WhitespaceInclusivePositionProvider. For most cases, PositionProvider is what you probably want.\",\n    \"\",\n    \"Node positions are represented with CodeRange objects. See the above example.\",\n    \"\",\n    \"```python\",\n    \".. autoclass:: libcst.metadata.PositionProvider\",\n    \"\",\n    \".. autoclass:: libcst.metadata.WhitespaceInclusivePositionProvider\",\n    \"\",\n    \".. autoclass:: libcst.metadata.CodeRange\",\n    \"\",\n    \".. autoclass:: libcst.metadata.CodePosition\",\n    \"```\",\n    \"\",\n    \"Byte offset and length pairs can be accessed using ByteSpanPositionProvider. This provider represents positions using CodeSpan, which will contain the byte offsets of a CSTNode from the start of the file, and its length (also in bytes).\",\n    \"\",\n    \"```python\",\n    \".. autoclass:: libcst.metadata.ByteSpanPositionProvider\",\n    \"\",\n    \".. autoclass:: libcst.metadata.CodeSpan\",\n    \"```\",\n    \"\",\n    \"Expression Context Metadata\",\n    \"\",\n    \".. autoclass:: libcst.metadata.ExpressionContextProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.ExpressionContext\",\n    \"\",\n    \"Scope Metadata\",\n    \"\",\n    \"Scopes contain and separate variables from each other. Scopes enforce that a local variable name bound inside of a function is not available outside of that function.\",\n    \"\",\n    \"While many programming languages are \\\"block-scoped\\\", Python is function-scoped. New scopes are created for classes, functions, and comprehensions. Other block constructs like conditional statements, loops, and try...except don't create their own scope.\",\n    \"\",\n    \"There are five different types of scopes in Python: BuiltinScope, GlobalScope, ClassScope, FunctionScope, and ComprehensionScope.\",\n    \"\",\n    \".. image:: _static/img/python_scopes.png\",\n    \"   :alt: Diagram showing how the above 5 scopes are nested in each other\",\n    \"   :width: 400\",\n    \"   :align: center\",\n    \"\",\n    \"LibCST allows you to inspect these scopes to see what local variables are assigned or accessed within.\",\n    \"\",\n    \".. note::\",\n    \"   Import statements bring new symbols into the scope that are declared in other files.\",\n    \"   As such, they are represented by Assignment for scope analysis purposes. Dotted imports (e.g. import a.b.c) generate multiple Assignment objects \u2014 one for each module. When analyzing references, only the most specific access is recorded.\",\n    \"\",\n    \"   For example, the above import a.b.c statement generates three Assignment objects: one for a, one for a.b, and one for a.b.c. A reference for a.b.c records an access only for the last assignment, while a reference for a.d only records an access for the Assignment representing a.\",\n    \"\",\n    \".. autoclass:: libcst.metadata.ScopeProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.BaseAssignment\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.Access\",\n    \".. autoclass:: libcst.metadata.Assignment\",\n    \".. autoclass:: libcst.metadata.BuiltinAssignment\",\n    \"\",\n    \".. autoclass:: libcst.metadata.Scope\",\n    \"   :no-undoc-members:\",\n    \"   :special-members: __contains__, __getitem__, __iter__\",\n    \"\",\n    \".. autoclass:: libcst.metadata.BuiltinScope\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.GlobalScope\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.FunctionScope\",\n    \".. autoclass:: libcst.metadata.ClassScope\",\n    \".. autoclass:: libcst.metadata.ComprehensionScope\",\n    \"\",\n    \".. autoclass:: libcst.metadata.Assignments\",\n    \"   :special-members: __contains__, __getitem__, __iter__\",\n    \"\",\n    \".. autoclass:: libcst.metadata.Accesses\",\n    \"   :special-members: __contains__, __getitem__, __iter__\",\n    \"\",\n    \"Qualified Name Metadata\",\n    \"\",\n    \"Qualified name provides an unambiguous name to locate the definition of a variable and is introduced for class and function in `PEP-3155 <https://www.python.org/dev/peps/pep-3155/>`_. QualifiedNameProvider provides possible QualifiedName given a CSTNode.\",\n    \"\",\n    \"We don't call it 'fully qualified name <https://en.wikipedia.org/wiki/Fully_qualified_name>'_ because the name refers to the current module which doesn't consider the hierarchy of the code repository.\",\n    \"\",\n    \"For fully qualified names, there's FullyQualifiedNameProvider which is similar to the above but takes the current module's location (relative to some python root folder, usually the repository's root) into account.\",\n    \"\",\n    \".. autoclass:: libcst.metadata.QualifiedNameSource\",\n    \".. autoclass:: libcst.metadata.QualifiedName\",\n    \".. autoclass:: libcst.metadata.QualifiedNameProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.FullyQualifiedNameProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \"Parent Node Metadata\",\n    \"\",\n    \"A CSTNode only has attributes linked to its child nodes and thus only top-down tree traversal is possible. Sometimes users may want to access the parent CSTNode for more information or traverse in a bottom-up manner. We provide ParentNodeProvider for those use cases.\",\n    \"\",\n    \".. autoclass:: libcst.metadata.ParentNodeProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \"File Path Metadata\",\n    \"\",\n    \"This provides the absolute file path on disk for any module being visited. Requires an active FullRepoManager when using this provider.\",\n    \"\",\n    \".. autoclass:: libcst.metadata.FilePathProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \"Type Inference Metadata\",\n    \"\",\n    \"Type inference is to automatically infer data types of an expression for deeper understanding of source code. In Python, type checkers like Mypy or Pyre analyze type annotations and infer types for expressions. TypeInferenceProvider is provided by Pyre Query API which requires setup watchman for incremental typechecking. FullRepoManager is built to manage the interprocess communication to Pyre.\",\n    \"\",\n    \".. autoclass:: libcst.metadata.TypeInferenceProvider\",\n    \"   :no-undoc-members:\",\n    \"\",\n    \".. autoclass:: libcst.metadata.FullRepoManager\",\n    \"   :no-undoc-members:\",\n    \"   :special-members: __init__\"\n]", "prompt_tokens": 2284, "completion_tokens": 2076, "total_tokens": 4360, "end_time": 1690381565}
{"id": 3, "start_time": 1690381565, "output": "[\n    \"Best Practices\",\n    \"\",\n    \"While there are plenty of ways to interact with LibCST, we recommend some patterns over others. Various best practices are laid out here along with their justifications.\",\n    \"\",\n    \"Avoid isinstance when traversing\",\n    \"\",\n    \"Excessive use of isinstance implies that you should rewrite your check as a matcher or unroll it into a set of visitor methods. Often, you should make use of libcst.ensure_type to make your type checker aware of a node's type.\",\n    \"\",\n    \"Often it is far easier to use libcst-matchers over explicit instance checks in a transform. Matching against some pattern and then extracting a value from a node's child is often easier and far more readable. Unfortunately, this clashes with various type-checkers which do not understand that libcst.matchers.matches guarantees a particular set of children. Instead of instance checks, you should use libcst.ensure_type which can be inlined and nested.\",\n    \"\",\n    \"For example, if you have written the following:\",\n    \"\",\n    \"def get_identifier_name(node: cst.CSTNode) -> Optional[str]:\",\n    \"    if m.matches(node, m.Name()):\",\n    \"        assert isinstance(node, cst.Name)\",\n    \"        return node.value\",\n    \"    return None\",\n    \"\",\n    \"You could instead write something like:\",\n    \"\",\n    \"def get_identifier_name(node: cst.CSTNode) -> Optional[str]:\",\n    \"    return (\",\n    \"        cst.ensure_type(node, cst.Name).value\",\n    \"        if m.matches(node, m.Name())\",\n    \"        else None\",\n    \"    )\",\n    \"\",\n    \"If you find yourself attempting to manually traverse a tree using isinstance, you can often rewrite your code using visitor methods instead. Nested instance checks can often be unrolled into visitors methods along with matcher decorators. This may entail adding additional state to your visitor, but the resulting code is far more likely to work after changes to LibCST itself. For example, if you have written the following:\",\n    \"\",\n    \"class CountBazFoobarArgs(cst.CSTVisitor):\",\n    \"    \\\"\\\"\\\"\",\n    \"    Given a set of function names, count how many arguments to those function\",\n    \"    calls are the identifiers \\\"baz\\\" or \\\"foobar\\\".\",\n    \"    \\\"\\\"\\\"\",\n    \"\",\n    \"    def __init__(self, functions: Set[str]) -> None:\",\n    \"        super().__init__()\",\n    \"        self.functions: Set[str] = functions\",\n    \"        self.arg_count: int = 0\",\n    \"\",\n    \"    def visit_Call(self, node: cst.Call) -> None:\",\n    \"        # See if the call itself is one of our functions we care about\",\n    \"        if isinstance(node.func, cst.Name) and node.func.value in self.functions:\",\n    \"            # Loop through each argument\",\n    \"            for arg in node.args:\",\n    \"                # See if the argument is an identifier matching what we want to count\",\n    \"                if isinstance(arg.value, cst.Name) and arg.value.value in {\\\"baz\\\", \\\"foobar\\\"}:\",\n    \"                    self.arg_count += 1\",\n    \"\",\n    \"You could instead write something like:\",\n    \"\",\n    \"class CountBazFoobarArgs(m.MatcherDecoratableVisitor):\",\n    \"    \\\"\\\"\\\"\",\n    \"    Given a set of function names, count how many arguments to those function\",\n    \"    calls are the identifiers \\\"baz\\\" or \\\"foobar\\\".\",\n    \"    \\\"\\\"\\\"\",\n    \"\",\n    \"    def __init__(self, functions: Set[str]) -> None:\",\n    \"        super().__init__()\",\n    \"        self.functions: Set[str] = functions\",\n    \"        self.arg_count: int = 0\",\n    \"        self.call_stack: List[str] = []\",\n    \"\",\n    \"    def visit_Call(self, node: cst.Call) -> None:\",\n    \"        # Store all calls in a stack\",\n    \"        if m.matches(node.func, m.Name()):\",\n    \"            self.call_stack.append(cst.ensure_type(node.func, cst.Name).value)\",\n    \"\",\n    \"    def leave_Call(self, original_node: cst.Call) -> None:\",\n    \"        # Pop the latest call off the stack\",\n    \"        if m.matches(node.func, m.Name()):\",\n    \"            self.call_stack.pop()\",\n    \"\",\n    \"    @m.visit(m.Arg(m.Name(\\\"baz\\\") | m.Name(\\\"foobar\\\")))\",\n    \"    def _count_args(self, node: cst.Arg) -> None:\",\n    \"        # See if the most shallow call is one we're interested in, so we can\",\n    \"        # count the args we care about only in calls we care about.\",\n    \"        if self.call_stack[-1] in self.functions:\",\n    \"            self.arg_count += 1\",\n    \"\",\n    \"While there is more code than the previous example, it is arguably easier to understand and maintain each part of the code. It is also immune to any future changes to LibCST which change's the tree shape. Note that LibCST is traversing the tree completely in both cases, so while the first appears to be faster, it is actually doing the same amount of work as the second.\",\n    \"\",\n    \"Prefer updated_node when modifying trees\",\n    \"\",\n    \"When you are using libcst.CSTTransformer to modify a LibCST tree, only return modifications to updated_node. The original_node parameter on any leave_<Node> method is provided for book-keeping and is guaranteed to be equal via == and is checks to the node parameter in the corresponding visit_<Node> method. Remember that LibCST trees are immutable, so the only way to make a modification is to return a new tree. Hence, by the time we get to calling leave_<Node> methods, we have an updated tree whose children have been modified. Therefore, you should only return original_node when you want to explicitly discard changes performed on the node's children.\",\n    \"\",\n    \"Say you wanted to rename all function calls which were calling global functions. So, you might write the following:\",\n    \"\",\n    \"class FunctionRenamer(cst.CSTTransformer):\",\n    \"    def leave_Call(self, original_node: cst.Call, updated_node: cst.Call) -> cst.Call:\",\n    \"        if m.matches(original_node.func, m.Name()):\",\n    \"            return original_node.with_changes(\",\n    \"                func=cst.Name(\",\n    \"                    \\\"renamed_\\\" + cst.ensure_type(original_node.func, cst.Name).value\",\n    \"                )\",\n    \"            )\",\n    \"        return original_node\",\n    \"\",\n    \"Consider writing instead:\",\n    \"\",\n    \"class FunctionRenamer(cst.CSTTransformer):\",\n    \"    def leave_Call(self, original_node: cst.Call, updated_node: cst.Call) -> cst.Call:\",\n    \"        if m.matches(updated_node.func, m.Name()):\",\n    \"            return updated_node.with_changes(\",\n    \"                func=cst.Name(\",\n    \"                    \\\"renamed_\\\" + cst.ensure_type(updated_node.func, cst.Name).value\",\n    \"                )\",\n    \"            )\",\n    \"        return updated_node\",\n    \"\",\n    \"The version that returns modifications to original_node has a subtle bug. Consider the following code snippet:\",\n    \"\",\n    \"some_func(1, 2, other_func(3))\",\n    \"\",\n    \"Running the recommended transform will return us a new code snippet that looks like this:\",\n    \"\",\n    \"renamed_some_func(1, 2, renamed_other_func(3))\",\n    \"\",\n    \"However, running the version which modifies original_node will instead return:\",\n    \"\",\n    \"renamed_some_func(1, 2, other_func(3))\",\n    \"\",\n    \"That's because the updated_node tree contains the modification to other_func. By returning modifications to original_node instead of updated_node, we accidentally discarded all the work done deeper in the tree.\",\n    \"\",\n    \"Provide a config when generating code from templates\",\n    \"\",\n    \"When generating complex trees, it is often far easier to pass a string to libcst.parse_statement or libcst.parse_expression than it is to manually construct the tree. When using these functions to generate code, you should always use the config parameter in order to generate code that matches the defaults of the module you are modifying. The libcst.Module class even has a helper attribute libcst.Module.config_for_parsing to make it easy to use. This ensures that line endings and indentation are consistent with the defaults in the module you are adding the code to.\",\n    \"\",\n    \"For example, to add a print statement to the end of a module:\",\n    \"\",\n    \"module = cst.parse_module(some_code_string)\",\n    \"new_module = module.with_changes(\",\n    \"    body=(\",\n    \"        *module.body,\",\n    \"        cst.parse_statement(\",\n    \"            \\\"print('Hello, world!')\\\",\",\n    \"            config=module.config_for_parsing,\",\n    \"        ),\",\n    \"    ),\",\n    \")\",\n    \"new_code_string = new_module.code\",\n    \"\",\n    \"Leaving out the config parameter means that LibCST will assume some defaults and could result in added code which is formatted differently than the rest of the module it was added to. In the above example, because we used the config from the already-parsed example, the print statement will be added with line endings matching the rest of the module. If we neglect the config parameter, we might accidentally insert a windows line ending into a unix file or vice versa, depending on what system we ran the code under.\"\n]", "prompt_tokens": 1876, "completion_tokens": 2013, "total_tokens": 3889, "end_time": 1690381565}
{"id": 11, "start_time": 1690381578, "output": "[\n\"Matchers\",\n\"Matchers are provided as a way of asking whether a particular LibCST node and its children match a particular shape. It is possible to write a visitor that tracks attributes using visit_<Node> methods. It is also possible to implement manual instance checking and traversal of a node's children. However, both are cumbersome to write and hard to understand. Matchers offer a more concise way of defining what attributes on a node matter when matching against predefined patterns.\",\n\"To accomplish this, a matcher has been created which corresponds to each LibCST node documented in :ref:`libcst-nodes`. Matchers default each of their attributes to the special sentinel matcher :func:`~libcst.matchers.DoNotCare`. When constructing a matcher, you can initialize the node with only the values of attributes that you are concerned with, leaving the rest of the attributes set to :func:`~libcst.matchers.DoNotCare` in order to skip comparing against them.\",\n\"Matcher APIs\",\n\"Functions\",\n\"Matchers can be used either by calling :func:`~libcst.matchers.matches` or :func:`~libcst.matchers.findall` directly, or by using various decorators to selectively control when LibCST calls visitor functions.\",\n\".. autofunction:: libcst.matchers.matches\",\n\".. autofunction:: libcst.matchers.findall\",\n\".. autofunction:: libcst.matchers.extract\",\n\".. autofunction:: libcst.matchers.extractall\",\n\".. autofunction:: libcst.matchers.replace\",\n\"Decorators\",\n\"The following decorators can be placed onto a method in a visitor or transformer in order to convert it into a visitor which is called when the provided matcher is true.\",\n\".. autofunction:: libcst.matchers.visit\",\n\".. autofunction:: libcst.matchers.leave\",\n\"The following decorators can be placed onto any existing visit_<Node> or leave_<Node> visitor, as well as any visitor created using either :func:`~libcst.matchers.visit` or :func:`~libcst.matchers.leave`. They control whether the visitor itself gets called or skipped by LibCST when traversing a tree. Note that when a visitor function is skipped, its children will still be visited based on the rules set forth in :ref:`libcst-visitors`. Namely, if you have a separate visit_<Node> visitor that returns False for a particular node, we will not traverse to its children.\",\n\".. autofunction:: libcst.matchers.call_if_inside\",\n\".. autofunction:: libcst.matchers.call_if_not_inside\",\n\"When using matcher decorators, your visitors must subclass from :class:`~libcst.matchers.MatcherDecoratableVisitor` instead of :class:`libcst.CSTVisitor`, and from :class:`~libcst.matchers.MatcherDecoratableTransformer` instead of :class:`libcst.CSTTransformer`. This is so that visitors and transformers not making use of matcher decorators do not pay the extra cost of their implementation. Note that if you do not subclass from :class:`~libcst.matchers.MatcherDecoratableVisitor` or :class:`~libcst.matchers.MatcherDecoratableTransformer`, you can still use the :func:`~libcst.matchers.matches` function.\",\n\"Both of these classes are strict subclasses of their corresponding LibCST base class, so they can be used anywhere that expects a LibCST base class. See :ref:`libcst-visitors` for more information.\",\n\".. autoclass:: libcst.matchers.MatcherDecoratableVisitor\",\n\".. autoclass:: libcst.matchers.MatcherDecoratableTransformer\",\n\"Traversal Order\",\n\"Visit and leave functions created using :func:`~libcst.matchers.visit` or :func:`~libcst.matchers.leave` follow the traversal order rules laid out in LibCST's visitor :ref:`libcst-visitor-traversal` with one additional rule. Any visit function created using the :func:`~libcst.matchers.visit` decorator will be called before a visit_<Node> function if it is defined for your visitor. The order in which various visit functions which are created with :func:`~libcst.matchers.visit` are called is indeterminate, but all such functions will be called before calling the visit_<Node> method. Similarly, any leave function created using the :func:`~libcst.matchers.leave` decorator will be called after a leave_<Node> function if it is defined for your visitor. The order in which various leave functions which are created with :func:`~libcst.matchers.leave` are called is indeterminate, but all such functions will be called after calling the visit_<Node> function if it is defined for your visitor.\",\n\"This has a few implications. The first is that if you return False from a visit_<Node> method, we are guaranteed to call your decorated visit functions as well. Second, when modifying a node in both leave_<Node> and a visitor created with :func:`~libcst.matchers.leave`, the original_node will be unchanged for both and the updated_node available to the decorated leave method will be the node that is returned by the leave_<Node> method. Chaining modifications across multiple leave functions is supported, but must be done with care.\",\n\"Matcher Types\",\n\"Concrete Matchers\",\n\"For each node found in :ref:`libcst-nodes`, a corresponding concrete matcher has been generated. Each matcher has attributes identical to its LibCST node counterpart. For example, :class:`libcst.Expr` includes the value and semicolon attributes, and therefore :class:`libcst.matchers.Expr` similarly includes the same attributes. Just as :class:`libcst.Expr`'s value is typed as taking a :class:`libcst.BaseExpression`, :class:`libcst.matchers.Expr`'s value is typed as taking a :class:`libcst.matchers.BaseExpression`. For every node that exists in LibCST, both concrete and abstract, a corresponding matcher has been defined.\",\n\"There are a few special cases to the rules laid out above. For starters, matchers don't support evaluating :class:`~libcst.MaybeSentinel`. There is no way to specify that you wish to match against a :class:`~libcst.MaybeSentinel` except with the :func:`~libcst.matchers.DoNotCare` matcher. This tends not to be an issue in practice because :class:`~libcst.MaybeSentinel` is only found on syntax nodes.\",\n\"While there are base classes such as :class:`libcst.matchers.BaseExpression`, you cannot match directly on them. They are provided for typing purposes only in order to exactly match the types on LibCST node attributes. If you need to match on all concrete subclasses of a base class, we recommend using the special matcher :class:`~libcst.matchers.OneOf`.\",\n\".. autoclass:: libcst.matchers.BaseMatcherNode\",\n\"Special Matchers\",\n\"Special matchers are matchers that don't have a corresponding LibCST node. Concrete matchers only match against their corresponding LibCST node, limiting their use under certain circumstances. Special matchers fill in the gap by allowing higher-level logic constructs such as inversion. You can use any special matcher in place of a concrete matcher when specifying matcher attributes. Additionally, you can also use the :class:`~libcst.matchers.AllOf` and :class:`~libcst.matchers.OneOf` special matchers in place of a concrete matcher when calling :func:`~libcst.matchers.matches` or using decorators.\",\n\".. autoclass:: libcst.matchers.OneOf\",\n\".. autoclass:: libcst.matchers.AllOf\",\n\".. autoclass:: libcst.matchers.TypeOf\",\n\".. autofunction:: libcst.matchers.DoesNotMatch\",\n\".. autoclass:: libcst.matchers.MatchIfTrue\",\n\".. autofunction:: libcst.matchers.MatchRegex\",\n\".. autoclass:: libcst.matchers.MatchMetadata\",\n\".. autoclass:: libcst.matchers.MatchMetadataIfTrue\",\n\".. autofunction:: libcst.matchers.SaveMatchedNode\",\n\".. autofunction:: libcst.matchers.DoNotCare\",\n\"Sequence Wildcard Matchers\",\n\"Sequence wildcard matchers are matchers that only get used when constructing a sequence to match against. Not all LibCST nodes have attributes which are sequences, but for those that do, sequence wildcard matchers offer a great degree of flexibility. Unlike all other matcher types, these allow you to match against more than one LibCST node, much like wildcards in regular expressions do.\",\n\"LibCST does not implicitly match on partial sequences for you. So, when matching against a sequence you will need to provide a complete pattern. This often means using helpers such as :func:`~libcst.matchers.ZeroOrMore` as the first and last element of your sequence. Think of it as the difference between Python's re.match and re.fullmatch functions. LibCST matchers behave like the latter so that it is possible to specify sequences which must start with, end with or be exactly equal to some pattern.\",\n\".. autoclass:: libcst.matchers.AtLeastN\",\n\".. autofunction:: libcst.matchers.ZeroOrMore\",\n\".. autoclass:: libcst.matchers.AtMostN\",\n\".. autofunction:: libcst.matchers.ZeroOrOne\"\n]", "prompt_tokens": 2084, "completion_tokens": 1850, "total_tokens": 3934, "end_time": 1690381578}
{"id": 4, "start_time": 1690381565, "output": "['Why LibCST?',\n '',\n \"Python's ast module already provides a syntax tree. Why do we need another?\",\n '',\n '.. include:: ../../README.rst',\n '    :start-after: why-libcst-intro-start',\n '    :end-before: why-libcst-intro-end',\n '',\n 'Abstract Syntax Trees (AST)',\n '',\n \"Let's look at Python's AST for the following code snippet:\",\n '',\n '    fn(1, 2)  # calls fn',\n '',\n '.. container:: toggle',\n '',\n '    .. code-block:: python',\n '',\n '        ast.Module(',\n '            body=[',\n '                ast.Expr(',\n '                    value=ast.Call(',\n '                        func=ast.Name(\"fn\", ctx=ast.Load()),',\n '                        args=[ast.Num(n=1), ast.Num(n=2)],',\n '                        keywords=[],',\n '                    ),',\n '                ),',\n '            ],',\n '        )',\n '',\n '.. graphviz::',\n '',\n '    digraph ast {',\n '        layout=dot;',\n '        rankdir=LR;',\n '        splines=polyline;',\n '        ranksep=.6;',\n '        nodesep=.4;',\n '        dpi=300;',\n '        bgcolor=transparent;',\n '        node [',\n '            style=filled,',\n '            color=\"#fb8d3f\",',\n '            fontcolor=\"#4b4f54\",',\n '            fillcolor=\"#fdd2b3\",',\n '            fontname=\"Source Code Pro Semibold\",',\n '            penwidth=\"2\",',\n '        ];',\n '        edge [',\n '            color=\"#999999\",',\n '            fontcolor=\"#4b4f54\",',\n '            fontname=\"Source Code Pro Semibold\",',\n '            fontsize=12,',\n '            penwidth=2,',\n '        ];',\n '        Name [label=\" Name(\\'fn\\') \"];',\n '        Load [label=\" Load() \"];',\n '        Num1 [label=\" Num(n=1) \"];',\n '        Num2 [label=\" Num(n=2) \"];',\n '        Module -> Expr [label=\"body[0]\"]',\n '        Expr -> Call [label=\"value\"]',\n '        Call -> Name [label=\"func\"]',\n '        Name -> Load [label=\"ctx\"]',\n '        Call -> Num1 [label=\"args[0]\"]',\n '        Call -> Num2 [label=\"args[1]\"]',\n '    }',\n '',\n 'This syntax tree does a great job of preserving the semantics of the original code, and the structure of the tree is relatively simple.',\n '',\n 'However, given only the AST, it wouldn\\'t be possible to reprint the original source code. `Like a JPEG <https://www.youtube.com/watch?v=j5nZhf8SjXw>`_, the Abstract Syntax Tree is lossy.',\n '',\n '- The comment we left at the line is gone.',\n \"- There's a newline at the end of the file, but the AST doesn't tell us that. It also doesn't tell us if it's ``\\\\n``, ``\\\\r``, or ``\\\\r\\\\n``.\",\n '- We\\'ve lost some information about the whitespace between the first and second argument.',\n '',\n 'Abstract Syntax Trees are good for tools like compilers and type checkers where the semantics of code is important, but the exact syntax isn\\'t.',\n '',\n 'Concrete Syntax Trees (CST)',\n '',\n 'A popular CST library for Python is `lib2to3 <https://github.com/python/cpython/tree/master/Lib/lib2to3>`_, which powers tools like `2to3 <https://docs.python.org/3/library/2to3.html>`_ and `Black <https://github.com/ambv/black>`_. Let\\'s look at the syntax tree it generates for the same piece of code:',\n '',\n '    fn(1, 2)  # calls fn',\n '',\n '.. container:: toggle',\n '',\n '    .. code-block:: python',\n '',\n '        Node(',\n '            file_input,',\n '            children=[',\n '                Node(',\n '                    simple_stmt,',\n '                    children=[',\n '                        Node(',\n '                            power,',\n '                            children=[',\n '                                Leaf(NAME, \"fn\", prefix=\"\"),',\n '                                Node(',\n '                                    trailer,',\n '                                    children=[',\n '                                        Leaf(LPAR, \"(\", prefix=\"\"),',\n '                                        Node(',\n '                                            arglist,',\n '                                            children=[',\n '                                                Leaf(NUMBER, \"1\", prefix=\"\"),',\n '                                                Leaf(COMMA, \",\", prefix=\"\"),',\n '                                                Leaf(NUMBER, \"2\", prefix=\" \"),',\n '                                            ],',\n '                                        ),',\n '                                        Leaf(RPAR, \")\", prefix=\"\"),',\n '                                    ],',\n '                                ),',\n '                            ],',\n '                        ),',\n '                        Leaf(',\n '                            NEWLINE,',\n '                            \"\\n\",',\n '                            prefix=\"  # calls fn\",',\n '                        ),',\n '                    ],',\n '                    prefix=\"\"',\n '                ),',\n '                Leaf(ENDMARKER, \"\", prefix=\"\"),',\n '            ],',\n '            prefix=\"\",',\n '        )',\n '',\n '.. graphviz::',\n '',\n '    digraph cst {',\n '        layout=dot;',\n '        rankdir=TB;',\n '        ordering=out;',\n '        splines=line;',\n '        ranksep=.3;',\n '        nodesep=.3;',\n '        dpi=300;',\n '        bgcolor=transparent;',\n '        node [',\n '            style=filled,',\n '            color=\"#fb8d3f\",',\n '            fontcolor=\"#4b4f54\",',\n '            fillcolor=\"#fdd2b3\",',\n '            fontname=\"Source Code Pro Semibold\",',\n '            penwidth=\"2\",',\n '            group=main,',\n '        ];',\n '        edge [',\n '            color=\"#999999\",',\n '            fontcolor=\"#4b4f54\",',\n '            fontname=\"Source Code Pro Semibold\",',\n '            fontsize=12,',\n '            penwidth=2,',\n '        ];',\n '        ENDMARKER [label=\" ENDMARKER(\\'\\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        NAME_fn [label=\" NAME(\\'fn\\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        LPAR [label=\" LPAR(\\'(\\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        NUMBER_1 [label=\" NUMBER(\\'1\\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        COMMA [label=\" COMMA(\\',\\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        NUMBER_2 [label=\" NUMBER(\\'2\\', prefix=\\' \\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        RPAR [label=\" RPAR(\\')\\') \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        NEWLINE [label=\"  NEWLINE(\\'\\\\n\\', prefix=\\'  # calls fn\\')  \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        file_input -> simple_stmt [label=\"0\"]',\n '        file_input -> ENDMARKER [label=\"1\"]',\n '        simple_stmt -> power [label=\"0\"]',\n '        simple_stmt -> NEWLINE [label=\"1\"]',\n '        power -> NAME_fn [label=\"0\"];',\n '        power -> trailer [label=\"1\"];',\n '        trailer -> LPAR [label=\"0\"];',\n '        trailer -> NUMBER_1 [label=\"1\"];',\n '        trailer -> COMMA [label=\"2\"];',\n '        trailer -> NUMBER_2 [label=\"3\"];',\n '        trailer -> RPAR [label=\"4\"];',\n '    }',\n '',\n 'This tree is lossless. It retains enough information to reprint the exact input code by storing whitespace information in ``prefix`` properties. This makes it a \"Concrete\" Syntax Tree, or CST.',\n '',\n 'However, much of the semantics of the code is now difficult to understand and extract. lib2to3 presents a tree that closely matches `Python\\'s grammar <https://docs.python.org/3/reference/grammar.html>`_ which can be hard to manipulate for complex operations.',\n '',\n '- Adding or removing a parameter from ``fn`` requires careful preservation of ``COMMA`` nodes.',\n '- Whitespace and comment ownership is unclear. Deleting nodes could result in invalid generated code.',\n '',\n 'Concrete Syntax Trees are good for operations that don\\'t significantly change the tree and tools that do not wish to change the semantics of the code itself, such as `Black <https://github.com/ambv/black>`_.',\n '',\n 'LibCST',\n '',\n 'LibCST takes a compromise between the two formats outlined above. Like a CST, LibCST preserves all whitespace and can be reprinted exactly. Like an AST, LibCST parses source into nodes that represent the semantics of the code.',\n '',\n '.. code-block:: python',\n '',\n '    fn(1, 2)  # calls fn',\n '',\n '.. container:: toggle',\n '',\n '    .. code-block:: python',\n '',\n '        Module(',\n '            body=[',\n '                SimpleStatementLine(',\n '                    body=[',\n '                        Expr(',\n '                            value=Call(',\n '                                func=Name(',\n '                                    value=\\'fn\\',',\n '                                    lpar=[],',\n '                                    rpar=[],',\n '                                ),',\n '                                args=[',\n '                                    Arg(',\n '                                        value=Integer(',\n '                                            value=\\'1\\',',\n '                                            lpar=[],',\n '                                            rpar=[],',\n '                                        ),',\n '                                        keyword=None,',\n '                                        equal=MaybeSentinel.DEFAULT,',\n '                                        comma=Comma(',\n '                                            whitespace_before=SimpleWhitespace(',\n '                                                value=\\'\\',',\n '                                            ),',\n '                                            whitespace_after=SimpleWhitespace(',\n '                                                value=\\' \\',',\n '                                            ),',\n '                                        ),',\n '                                        star=\\'\\',',\n '                                        whitespace_after_star=SimpleWhitespace(',\n '                                            value=\\'\\',',\n '                                        ),',\n '                                        whitespace_after_arg=SimpleWhitespace(',\n '                                            value=\\'\\',',\n '                                        ),',\n '                                    ),',\n '                                    Arg(',\n '                                        value=Integer(',\n '                                            value=\\'2\\',',\n '                                            lpar=[],',\n '                                            rpar=[],',\n '                                        ),',\n '                                        keyword=None,',\n '                                        equal=MaybeSentinel.DEFAULT,',\n '                                        comma=MaybeSentinel.DEFAULT,',\n '                                        star=\\'\\',',\n '                                        whitespace_after_star=SimpleWhitespace(',\n '                                            value=\\'\\',',\n '                                        ),',\n '                                        whitespace_after_arg=SimpleWhitespace(',\n '                                            value=\\'\\',',\n '                                        ),',\n '                                    ),',\n '                                ],',\n '                                lpar=[],',\n '                                rpar=[],',\n '                                whitespace_after_func=SimpleWhitespace(',\n '                                    value=\\'\\',',\n '                                ),',\n '                                whitespace_before_args=SimpleWhitespace(',\n '                                    value=\\'\\',',\n '                                ),',\n '                            ),',\n '                            semicolon=MaybeSentinel.DEFAULT,',\n '                        ),',\n '                    ],',\n '                    leading_lines=[],',\n '                    trailing_whitespace=TrailingWhitespace(',\n '                        whitespace=SimpleWhitespace(',\n '                            value=\\'  \\',',\n '                        ),',\n '                        comment=Comment(',\n '                            value=\\'# calls fn\\',',\n '                        ),',\n '                        newline=Newline(',\n '                            value=None,',\n '                        ),',\n '                    ),',\n '                ),',\n '            ],',\n '            header=[],',\n '            footer=[],',\n '            encoding=\\'utf-8\\',',\n '            default_indent=\\'    \\',',\n '            default_newline=\\'\\\\n\\',',\n '            has_trailing_newline=True,',\n '        )',\n '',\n '.. graphviz::',\n '',\n '    digraph libcst {',\n '        layout=dot;',\n '        rankdir=TB;',\n '        splines=line;',\n '        ranksep=0.5;',\n '        nodesep=1.0;',\n '        dpi=300;',\n '        bgcolor=transparent;',\n '        node [',\n '            style=filled,',\n '            color=\"#fb8d3f\",',\n '            fontcolor=\"#4b4f54\",',\n '            fillcolor=\"#fdd2b3\",',\n '            fontname=\"Source Code Pro Semibold\",',\n '            penwidth=\"2\",',\n '            group=main,',\n '        ];',\n '        edge [',\n '            color=\"#999999\",',\n '            fontcolor=\"#4b4f54\",',\n '            fontname=\"Source Code Pro Semibold\",',\n '            fontsize=12,',\n '            penwidth=2,',\n '        ];',\n '        Module [label=\"Module\"];',\n '        SimpleStatementLine [label=\"SimpleStatementLine\"];',\n '        Expr [label=\"Expr\"];',\n '        Call [label=\"Call\"];',\n '        Name [label=\"Name\"];',\n '        NameValue [label=\" \\'fn\\' \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        Arg1 [label=\"Arg\"];',\n '        Integer1 [label=\"Integer\"];',\n '        Integer1Value [label=\" \\'1\\' \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        Comma [label=\"Comma\"];',\n '        SimpleWhitespace2 [label=\"SimpleWhitespace\", color=\"#777777\", fillcolor=\"#eeeeee\"];',\n '        SimpleWhitespace2Value [label=\" \\' \\' \", color=\"#777777\", fillcolor=\"#cccccc\", shape=box];',\n '        Arg2 [label=\"Arg\"];',\n '        Integer2 [label=\"Integer\"];',\n '        Integer2Value [label=\" \\'2\\' \", color=\"#3e99ed\", fillcolor=\"#b8d9f8\", shape=box];',\n '        TrailingWhitespace [label=\"TrailingWhitespace\", color=\"#777777\", fillcolor=\"#eeeeee\"];',\n '        SimpleWhitespace1 [label=\"SimpleWhitespace\", color=\"#777777\", fillcolor=\"#eeeeee\"];',\n '        SimpleWhitespace1Value [label=\" \\'  \\' \", color=\"#777777\", fillcolor=\"#cccccc\", shape=box];',\n '        Comment1 [label=\"Comment\", color=\"#777777\", fillcolor=\"#eeeeee\"];',\n '        Comment1Value [label=\" \\'# calls fn\\' \", color=\"#777777\", fillcolor=\"#cccccc\", shape=box];',\n '',\n '        Module -> SimpleStatementLine [label=\"body[0]\"];',\n '        SimpleStatementLine -> Expr [label=\"body[0]\"];',\n '        Expr -> Call [label=\"value\"];',\n '        Call -> Name [label=\"func\"];',\n '        Name -> NameValue [label=\"value\"];',\n '        Call -> Arg1 [label=\"args[0]\"];',\n '        Arg1 -> Integer1 [label=\"value\"];',\n '        Integer1 -> Integer1Value [label=\"value\"];',\n '        Arg1 -> Comma [label=\"comma\"];',\n '        Comma -> SimpleWhitespace2 [label=\"whitespace_after\"];',\n '        SimpleWhitespace2 -> SimpleWhitespace2Value [label=\"value\"];',\n '        Call -> Arg2 [label=\"args[1]\"];',\n '        Arg2 -> Integer2 [label=\"value\"];',\n '        Integer2 -> Integer2Value [label=\"value\"];',\n '        SimpleStatementLine -> TrailingWhitespace [label=\"trailing_whitespace\"];',\n '        TrailingWhitespace -> SimpleWhitespace1 [label=\"whitespace\"];',\n '        SimpleWhitespace1 -> SimpleWhitespace1Value [label=\"value\"];',\n '        TrailingWhitespace -> Comment1 [label=\"comment\"];',\n '        Comment1 -> Comment1Value [label=\"value\"];',\n '    }',\n '',\n 'LibCST preserves whitespace by parsing it using an internal whitespace parser and assigning it to relevant nodes. This allows for much more granular whitespace ownership and greatly reduces the amount of work necessary to perform complex manipulations. Additionally, it is fully typed. A node\\'s children are well-defined and match the semantics of Python.',\n '',\n 'However, this does come with some downsides.',\n '',\n '- It is more difficult to implement tools that focus almost exclusively on whitespace on top of LibCST instead of lib2to3. For example, `Black <https://github.com/ambv/black>`_ would need to modify whitespace nodes instead of prefix strings, making its implementation much more complex.',\n '- The equivalent AST for a Python module will usually be simpler. We must preserve whitespace ownership by assigning it to nodes that make the most sense which requires us to introduce nodes such as :class:`~libcst.Comma`.',\n '- Parsing with LibCST will always be slower than Python\\'s AST due to the extra work needed to assign whitespace correctly.',\n '',\n 'Nevertheless, we think that the trade-offs made in LibCST are worthwhile and offer a great deal of flexibility and power.']", "prompt_tokens": 3066, "completion_tokens": 3640, "total_tokens": 6706, "end_time": 1690381565}
